https://www.hackerrank.com/contests/jsp4-13-02-2022/challenges
1.Take an input r, the size of row.
2.Take an input c, the size of column.
2.Take r*c more inputs and store that in an array.


Write a function Spiral print it clock wise and then anti-clock wise

Example(To be used only for expected output):
Input:
3 3
1 2 3
4 5 6
7 8 9
Output:
1 2 3 6 9 8 7 4 5
1 4 7 8 9 6 3 2 5
Input Format

Integer representing r and c.
Integer representing r*c numbers.
Constraints

N cannot be Negative.
0 <= r & c<= 10^9
-10^9 <= Arr[i] <= 10^9
Output Format

print the output.

Sample Input 0

5 5
1 2 3 4 5
6 7 8 9 10
11 12 13 14 15
16 17 18 19 20
21 22 23 24 25
Sample Output 0

1 2 3 4 5 10 15 20 25 24 23 22 21 16 11 6 7 8 9 14 19 18 17 12 13
1 6 11 16 21 22 23 24 25 20 15 10 5 4 3 2 7 12 17 18 19 14 9 8 13
//////////////////////////////////////////////////////////////////
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
         Scanner sc = new Scanner(System.in);
        int m = sc.nextInt();
        int n = sc.nextInt();
       
         int[][] mat = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                mat[i][j] = sc.nextInt();
            }
        }
        int tne=m*n;
        int minr=0,minc=0,maxr=m-1,maxc=n-1;     
         //clockwise
        while(tne>0){
            //top
            for(int i =minc;i<=maxc && tne>0;i++){
                System.out.print(mat[minr][i] +" ");
                tne--;
            }
            minr++;
            //right
            for(int i =minr;i<=maxr && tne>0;i++){
                System.out.print(mat[i][maxc]+" ");
                tne--;
            }
            maxc--;
            //bottom
                for(int i =maxc;i>=minc && tne>0;i--){
                System.out.print(mat[maxr][i]+" ");
                tne--;
            }
            maxr--; 
            //left
                    for(int i =maxr;i>=minr && tne>0;i--){
                System.out.print(mat[i][minc]+" ");
                tne--;
            }
            minc++; 
        }
            System.out.println();
         tne=m*n;
        minr=0;minc=0;maxr=m-1;maxc=n-1;
        //anticlockwise
        while(tne>0){
            //left
            for(int i =minr;i<=maxr && tne>0;i++){
                System.out.print(mat[i][minc] +" ");
                tne--;
            }
            minc++;
            //bottom
            for(int i =minc;i<=maxc && tne>0;i++){
                System.out.print(mat[maxr][i]+" ");
                tne--;
            }
            maxr--;
            //right
                for(int i =maxr;i>=minr && tne>0;i--){
                System.out.print(mat[i][maxc]+" ");
                tne--;
            }
            maxc--; 
            //top
                    for(int i =maxc;i>=minc && tne>0;i--){
                System.out.print(mat[minr][i]+" ");
                tne--;
            }
            minr++; 
        }
    }
       
}