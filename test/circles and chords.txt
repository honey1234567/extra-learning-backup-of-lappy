Approach-
https://www.youtube.com/watch?v=zx6_ypjbstk&t=305s
https://www.youtube.com/watch?v=qgQg1BcCWBA&t=1569s
//////////////////////////////////////////////////////
Recursion
import java.io.*;

import java.util.*;

 
public class Main
{
  
 
public static long NumberOfChords (int n)
  {
    
      //write your code here
      if (n == 0)
      return 1;
    
if (n % 2 != 0)
      return 0;
    
if (n == 2)
      return 1;
    
long sum = 0;
    
 
 
for (int i = 0; i <= n - 2; i = i + 2)
      {
	
sum += (NumberOfChords (i) * NumberOfChords (n - 2 - i));
      
 
} 
 
return sum;
  
 
 
}
  
public static void main (String[]args)
  {
    
Scanner scn = new Scanner (System.in);
    
int n = scn.nextInt ();
    
System.out.println (NumberOfChords (2 * n));

} 
}
//////////////////Tabulation///////////////////////////////////
import java.io.*;
import java.util.*;

public class Main {

    public static long NumberOfChords(int n, long[] dp){
        //write your code here
     

  
    dp[0] = 1;
    dp[2] = 1;
    for(int i=4;i<=n;i+=2)//for odd point on any side we will be having intersection so take even points
    {
        dp[i] = 0;
        for(int j=0;j<=i-2;j+=2)//loop till i-2 coz from i we already made chord on 2 points 
        {
            dp[i] = (dp[i] + (dp[j] * dp[i-j-2]));//for i=6 points,we use dp(04,22,40) as we already selected 2 among 6 so i-2 and -j coz on left
//part wealready selected j
        }
    }
     
  return dp[n];

    
    }
  public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        long[] dp = new long[2*n +1];
        System.out.println(NumberOfChords(2*n,dp));
	}
}
